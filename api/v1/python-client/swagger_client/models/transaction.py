# coding: utf-8

"""
    Paysafe Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Transaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trx_volume': 'str',
        'trx_average': 'str',
        'trx_high': 'str',
        'previously_accepted': 'str',
        'acceptance': 'str',
        'card_present': 'str',
        'ship_goods': 'str',
        'delivery_time': 'str'
    }

    attribute_map = {
        'trx_volume': 'trx_volume',
        'trx_average': 'trx_average',
        'trx_high': 'trx_high',
        'previously_accepted': 'previously_accepted',
        'acceptance': 'acceptance',
        'card_present': 'card_present',
        'ship_goods': 'ship_goods',
        'delivery_time': 'delivery_time'
    }

    def __init__(self, trx_volume=None, trx_average=None, trx_high=None, previously_accepted=None, acceptance=None, card_present=None, ship_goods=None, delivery_time=None):  # noqa: E501
        """Transaction - a model defined in Swagger"""  # noqa: E501

        self._trx_volume = None
        self._trx_average = None
        self._trx_high = None
        self._previously_accepted = None
        self._acceptance = None
        self._card_present = None
        self._ship_goods = None
        self._delivery_time = None
        self.discriminator = None

        self.trx_volume = trx_volume
        self.trx_average = trx_average
        self.trx_high = trx_high
        self.previously_accepted = previously_accepted
        self.acceptance = acceptance
        self.card_present = card_present
        self.ship_goods = ship_goods
        self.delivery_time = delivery_time

    @property
    def trx_volume(self):
        """Gets the trx_volume of this Transaction.  # noqa: E501


        :return: The trx_volume of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._trx_volume

    @trx_volume.setter
    def trx_volume(self, trx_volume):
        """Sets the trx_volume of this Transaction.


        :param trx_volume: The trx_volume of this Transaction.  # noqa: E501
        :type: str
        """
        if trx_volume is None:
            raise ValueError("Invalid value for `trx_volume`, must not be `None`")  # noqa: E501

        self._trx_volume = trx_volume

    @property
    def trx_average(self):
        """Gets the trx_average of this Transaction.  # noqa: E501


        :return: The trx_average of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._trx_average

    @trx_average.setter
    def trx_average(self, trx_average):
        """Sets the trx_average of this Transaction.


        :param trx_average: The trx_average of this Transaction.  # noqa: E501
        :type: str
        """
        if trx_average is None:
            raise ValueError("Invalid value for `trx_average`, must not be `None`")  # noqa: E501

        self._trx_average = trx_average

    @property
    def trx_high(self):
        """Gets the trx_high of this Transaction.  # noqa: E501


        :return: The trx_high of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._trx_high

    @trx_high.setter
    def trx_high(self, trx_high):
        """Sets the trx_high of this Transaction.


        :param trx_high: The trx_high of this Transaction.  # noqa: E501
        :type: str
        """
        if trx_high is None:
            raise ValueError("Invalid value for `trx_high`, must not be `None`")  # noqa: E501

        self._trx_high = trx_high

    @property
    def previously_accepted(self):
        """Gets the previously_accepted of this Transaction.  # noqa: E501


        :return: The previously_accepted of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._previously_accepted

    @previously_accepted.setter
    def previously_accepted(self, previously_accepted):
        """Sets the previously_accepted of this Transaction.


        :param previously_accepted: The previously_accepted of this Transaction.  # noqa: E501
        :type: str
        """
        if previously_accepted is None:
            raise ValueError("Invalid value for `previously_accepted`, must not be `None`")  # noqa: E501

        self._previously_accepted = previously_accepted

    @property
    def acceptance(self):
        """Gets the acceptance of this Transaction.  # noqa: E501


        :return: The acceptance of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._acceptance

    @acceptance.setter
    def acceptance(self, acceptance):
        """Sets the acceptance of this Transaction.


        :param acceptance: The acceptance of this Transaction.  # noqa: E501
        :type: str
        """
        if acceptance is None:
            raise ValueError("Invalid value for `acceptance`, must not be `None`")  # noqa: E501

        self._acceptance = acceptance

    @property
    def card_present(self):
        """Gets the card_present of this Transaction.  # noqa: E501


        :return: The card_present of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._card_present

    @card_present.setter
    def card_present(self, card_present):
        """Sets the card_present of this Transaction.


        :param card_present: The card_present of this Transaction.  # noqa: E501
        :type: str
        """
        if card_present is None:
            raise ValueError("Invalid value for `card_present`, must not be `None`")  # noqa: E501

        self._card_present = card_present

    @property
    def ship_goods(self):
        """Gets the ship_goods of this Transaction.  # noqa: E501


        :return: The ship_goods of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._ship_goods

    @ship_goods.setter
    def ship_goods(self, ship_goods):
        """Sets the ship_goods of this Transaction.


        :param ship_goods: The ship_goods of this Transaction.  # noqa: E501
        :type: str
        """
        if ship_goods is None:
            raise ValueError("Invalid value for `ship_goods`, must not be `None`")  # noqa: E501

        self._ship_goods = ship_goods

    @property
    def delivery_time(self):
        """Gets the delivery_time of this Transaction.  # noqa: E501


        :return: The delivery_time of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._delivery_time

    @delivery_time.setter
    def delivery_time(self, delivery_time):
        """Sets the delivery_time of this Transaction.


        :param delivery_time: The delivery_time of this Transaction.  # noqa: E501
        :type: str
        """
        if delivery_time is None:
            raise ValueError("Invalid value for `delivery_time`, must not be `None`")  # noqa: E501

        self._delivery_time = delivery_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
