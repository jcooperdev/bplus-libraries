# coding: utf-8

"""
    Paysafe Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Updatecontact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_name': 'str',
        'company_legal': 'str',
        'address': 'str',
        'address2': 'str',
        'city': 'str',
        'state': 'str',
        'postal_code': 'str',
        'zip4': 'str',
        'phone_number': 'str',
        'email': 'str',
        'p_address': 'str',
        'p_address2': 'str',
        'p_city': 'str',
        'p_state': 'str',
        'p_postal_code': 'str',
        'p_zip4': 'str'
    }

    attribute_map = {
        'company_name': 'company_name',
        'company_legal': 'company_legal',
        'address': 'address',
        'address2': 'address2',
        'city': 'city',
        'state': 'state',
        'postal_code': 'postal_code',
        'zip4': 'zip4',
        'phone_number': 'phone_number',
        'email': 'email',
        'p_address': 'p_address',
        'p_address2': 'p_address2',
        'p_city': 'p_city',
        'p_state': 'p_state',
        'p_postal_code': 'p_postal_code',
        'p_zip4': 'p_zip4'
    }

    def __init__(self, company_name=None, company_legal=None, address=None, address2=None, city=None, state=None, postal_code=None, zip4=None, phone_number=None, email=None, p_address=None, p_address2=None, p_city=None, p_state=None, p_postal_code=None, p_zip4=None):  # noqa: E501
        """Updatecontact - a model defined in Swagger"""  # noqa: E501

        self._company_name = None
        self._company_legal = None
        self._address = None
        self._address2 = None
        self._city = None
        self._state = None
        self._postal_code = None
        self._zip4 = None
        self._phone_number = None
        self._email = None
        self._p_address = None
        self._p_address2 = None
        self._p_city = None
        self._p_state = None
        self._p_postal_code = None
        self._p_zip4 = None
        self.discriminator = None

        self.company_name = company_name
        self.company_legal = company_legal
        self.address = address
        self.address2 = address2
        self.city = city
        self.state = state
        self.postal_code = postal_code
        self.zip4 = zip4
        self.phone_number = phone_number
        self.email = email
        self.p_address = p_address
        self.p_address2 = p_address2
        self.p_city = p_city
        self.p_state = p_state
        self.p_postal_code = p_postal_code
        self.p_zip4 = p_zip4

    @property
    def company_name(self):
        """Gets the company_name of this Updatecontact.  # noqa: E501


        :return: The company_name of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Updatecontact.


        :param company_name: The company_name of this Updatecontact.  # noqa: E501
        :type: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._company_name = company_name

    @property
    def company_legal(self):
        """Gets the company_legal of this Updatecontact.  # noqa: E501


        :return: The company_legal of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._company_legal

    @company_legal.setter
    def company_legal(self, company_legal):
        """Sets the company_legal of this Updatecontact.


        :param company_legal: The company_legal of this Updatecontact.  # noqa: E501
        :type: str
        """
        if company_legal is None:
            raise ValueError("Invalid value for `company_legal`, must not be `None`")  # noqa: E501

        self._company_legal = company_legal

    @property
    def address(self):
        """Gets the address of this Updatecontact.  # noqa: E501


        :return: The address of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Updatecontact.


        :param address: The address of this Updatecontact.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def address2(self):
        """Gets the address2 of this Updatecontact.  # noqa: E501


        :return: The address2 of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this Updatecontact.


        :param address2: The address2 of this Updatecontact.  # noqa: E501
        :type: str
        """
        if address2 is None:
            raise ValueError("Invalid value for `address2`, must not be `None`")  # noqa: E501

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this Updatecontact.  # noqa: E501


        :return: The city of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Updatecontact.


        :param city: The city of this Updatecontact.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def state(self):
        """Gets the state of this Updatecontact.  # noqa: E501


        :return: The state of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Updatecontact.


        :param state: The state of this Updatecontact.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def postal_code(self):
        """Gets the postal_code of this Updatecontact.  # noqa: E501


        :return: The postal_code of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Updatecontact.


        :param postal_code: The postal_code of this Updatecontact.  # noqa: E501
        :type: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def zip4(self):
        """Gets the zip4 of this Updatecontact.  # noqa: E501


        :return: The zip4 of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._zip4

    @zip4.setter
    def zip4(self, zip4):
        """Sets the zip4 of this Updatecontact.


        :param zip4: The zip4 of this Updatecontact.  # noqa: E501
        :type: str
        """
        if zip4 is None:
            raise ValueError("Invalid value for `zip4`, must not be `None`")  # noqa: E501

        self._zip4 = zip4

    @property
    def phone_number(self):
        """Gets the phone_number of this Updatecontact.  # noqa: E501


        :return: The phone_number of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Updatecontact.


        :param phone_number: The phone_number of this Updatecontact.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def email(self):
        """Gets the email of this Updatecontact.  # noqa: E501


        :return: The email of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Updatecontact.


        :param email: The email of this Updatecontact.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def p_address(self):
        """Gets the p_address of this Updatecontact.  # noqa: E501


        :return: The p_address of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._p_address

    @p_address.setter
    def p_address(self, p_address):
        """Sets the p_address of this Updatecontact.


        :param p_address: The p_address of this Updatecontact.  # noqa: E501
        :type: str
        """
        if p_address is None:
            raise ValueError("Invalid value for `p_address`, must not be `None`")  # noqa: E501

        self._p_address = p_address

    @property
    def p_address2(self):
        """Gets the p_address2 of this Updatecontact.  # noqa: E501


        :return: The p_address2 of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._p_address2

    @p_address2.setter
    def p_address2(self, p_address2):
        """Sets the p_address2 of this Updatecontact.


        :param p_address2: The p_address2 of this Updatecontact.  # noqa: E501
        :type: str
        """
        if p_address2 is None:
            raise ValueError("Invalid value for `p_address2`, must not be `None`")  # noqa: E501

        self._p_address2 = p_address2

    @property
    def p_city(self):
        """Gets the p_city of this Updatecontact.  # noqa: E501


        :return: The p_city of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._p_city

    @p_city.setter
    def p_city(self, p_city):
        """Sets the p_city of this Updatecontact.


        :param p_city: The p_city of this Updatecontact.  # noqa: E501
        :type: str
        """
        if p_city is None:
            raise ValueError("Invalid value for `p_city`, must not be `None`")  # noqa: E501

        self._p_city = p_city

    @property
    def p_state(self):
        """Gets the p_state of this Updatecontact.  # noqa: E501


        :return: The p_state of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._p_state

    @p_state.setter
    def p_state(self, p_state):
        """Sets the p_state of this Updatecontact.


        :param p_state: The p_state of this Updatecontact.  # noqa: E501
        :type: str
        """
        if p_state is None:
            raise ValueError("Invalid value for `p_state`, must not be `None`")  # noqa: E501

        self._p_state = p_state

    @property
    def p_postal_code(self):
        """Gets the p_postal_code of this Updatecontact.  # noqa: E501


        :return: The p_postal_code of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._p_postal_code

    @p_postal_code.setter
    def p_postal_code(self, p_postal_code):
        """Sets the p_postal_code of this Updatecontact.


        :param p_postal_code: The p_postal_code of this Updatecontact.  # noqa: E501
        :type: str
        """
        if p_postal_code is None:
            raise ValueError("Invalid value for `p_postal_code`, must not be `None`")  # noqa: E501

        self._p_postal_code = p_postal_code

    @property
    def p_zip4(self):
        """Gets the p_zip4 of this Updatecontact.  # noqa: E501


        :return: The p_zip4 of this Updatecontact.  # noqa: E501
        :rtype: str
        """
        return self._p_zip4

    @p_zip4.setter
    def p_zip4(self, p_zip4):
        """Sets the p_zip4 of this Updatecontact.


        :param p_zip4: The p_zip4 of this Updatecontact.  # noqa: E501
        :type: str
        """
        if p_zip4 is None:
            raise ValueError("Invalid value for `p_zip4`, must not be `None`")  # noqa: E501

        self._p_zip4 = p_zip4

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Updatecontact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
