# coding: utf-8

"""
    Paysafe Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_name': 'str',
        'legal': 'str',
        'type': 'str',
        'vat': 'str',
        'website': 'str',
        'start_date': 'str'
    }

    attribute_map = {
        'company_name': 'company_name',
        'legal': 'legal',
        'type': 'type',
        'vat': 'vat',
        'website': 'website',
        'start_date': 'start_date'
    }

    def __init__(self, company_name=None, legal=None, type=None, vat=None, website=None, start_date=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501

        self._company_name = None
        self._legal = None
        self._type = None
        self._vat = None
        self._website = None
        self._start_date = None
        self.discriminator = None

        self.company_name = company_name
        self.legal = legal
        self.type = type
        self.vat = vat
        self.website = website
        self.start_date = start_date

    @property
    def company_name(self):
        """Gets the company_name of this Account.  # noqa: E501


        :return: The company_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Account.


        :param company_name: The company_name of this Account.  # noqa: E501
        :type: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._company_name = company_name

    @property
    def legal(self):
        """Gets the legal of this Account.  # noqa: E501


        :return: The legal of this Account.  # noqa: E501
        :rtype: str
        """
        return self._legal

    @legal.setter
    def legal(self, legal):
        """Sets the legal of this Account.


        :param legal: The legal of this Account.  # noqa: E501
        :type: str
        """
        if legal is None:
            raise ValueError("Invalid value for `legal`, must not be `None`")  # noqa: E501

        self._legal = legal

    @property
    def type(self):
        """Gets the type of this Account.  # noqa: E501


        :return: The type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Account.


        :param type: The type of this Account.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def vat(self):
        """Gets the vat of this Account.  # noqa: E501


        :return: The vat of this Account.  # noqa: E501
        :rtype: str
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this Account.


        :param vat: The vat of this Account.  # noqa: E501
        :type: str
        """
        if vat is None:
            raise ValueError("Invalid value for `vat`, must not be `None`")  # noqa: E501

        self._vat = vat

    @property
    def website(self):
        """Gets the website of this Account.  # noqa: E501


        :return: The website of this Account.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Account.


        :param website: The website of this Account.  # noqa: E501
        :type: str
        """
        if website is None:
            raise ValueError("Invalid value for `website`, must not be `None`")  # noqa: E501

        self._website = website

    @property
    def start_date(self):
        """Gets the start_date of this Account.  # noqa: E501


        :return: The start_date of this Account.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Account.


        :param start_date: The start_date of this Account.  # noqa: E501
        :type: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
