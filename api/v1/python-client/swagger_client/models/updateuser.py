# coding: utf-8

"""
    Paysafe Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Updateuser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name_first': 'str',
        'name_last': 'str',
        'email': 'str',
        'login': 'str'
    }

    attribute_map = {
        'name_first': 'name_first',
        'name_last': 'name_last',
        'email': 'email',
        'login': 'login'
    }

    def __init__(self, name_first=None, name_last=None, email=None, login=None):  # noqa: E501
        """Updateuser - a model defined in Swagger"""  # noqa: E501

        self._name_first = None
        self._name_last = None
        self._email = None
        self._login = None
        self.discriminator = None

        self.name_first = name_first
        self.name_last = name_last
        self.email = email
        self.login = login

    @property
    def name_first(self):
        """Gets the name_first of this Updateuser.  # noqa: E501


        :return: The name_first of this Updateuser.  # noqa: E501
        :rtype: str
        """
        return self._name_first

    @name_first.setter
    def name_first(self, name_first):
        """Sets the name_first of this Updateuser.


        :param name_first: The name_first of this Updateuser.  # noqa: E501
        :type: str
        """
        if name_first is None:
            raise ValueError("Invalid value for `name_first`, must not be `None`")  # noqa: E501

        self._name_first = name_first

    @property
    def name_last(self):
        """Gets the name_last of this Updateuser.  # noqa: E501


        :return: The name_last of this Updateuser.  # noqa: E501
        :rtype: str
        """
        return self._name_last

    @name_last.setter
    def name_last(self, name_last):
        """Sets the name_last of this Updateuser.


        :param name_last: The name_last of this Updateuser.  # noqa: E501
        :type: str
        """
        if name_last is None:
            raise ValueError("Invalid value for `name_last`, must not be `None`")  # noqa: E501

        self._name_last = name_last

    @property
    def email(self):
        """Gets the email of this Updateuser.  # noqa: E501


        :return: The email of this Updateuser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Updateuser.


        :param email: The email of this Updateuser.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def login(self):
        """Gets the login of this Updateuser.  # noqa: E501


        :return: The login of this Updateuser.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this Updateuser.


        :param login: The login of this Updateuser.  # noqa: E501
        :type: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")  # noqa: E501

        self._login = login

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Updateuser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
