# coding: utf-8

"""
    Paysafe Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Owner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner_ctime': 'str',
        'owner_address': 'str',
        'owner_address2': 'str',
        'owner_city': 'str',
        'owner_state': 'str',
        'owner_zip': 'str',
        'owner_zip4': 'str',
        'owner_ptime': 'str',
        'owner_paddress': 'str',
        'owner_paddress2': 'str',
        'owner_pcity': 'str',
        'owner_pstate': 'str',
        'owner_pzip': 'str',
        'owner_pzip4': 'str'
    }

    attribute_map = {
        'owner_ctime': 'owner_ctime',
        'owner_address': 'owner_address',
        'owner_address2': 'owner_address2',
        'owner_city': 'owner_city',
        'owner_state': 'owner_state',
        'owner_zip': 'owner_zip',
        'owner_zip4': 'owner_zip4',
        'owner_ptime': 'owner_ptime',
        'owner_paddress': 'owner_paddress',
        'owner_paddress2': 'owner_paddress2',
        'owner_pcity': 'owner_pcity',
        'owner_pstate': 'owner_pstate',
        'owner_pzip': 'owner_pzip',
        'owner_pzip4': 'owner_pzip4'
    }

    def __init__(self, owner_ctime=None, owner_address=None, owner_address2=None, owner_city=None, owner_state=None, owner_zip=None, owner_zip4=None, owner_ptime=None, owner_paddress=None, owner_paddress2=None, owner_pcity=None, owner_pstate=None, owner_pzip=None, owner_pzip4=None):  # noqa: E501
        """Owner - a model defined in Swagger"""  # noqa: E501

        self._owner_ctime = None
        self._owner_address = None
        self._owner_address2 = None
        self._owner_city = None
        self._owner_state = None
        self._owner_zip = None
        self._owner_zip4 = None
        self._owner_ptime = None
        self._owner_paddress = None
        self._owner_paddress2 = None
        self._owner_pcity = None
        self._owner_pstate = None
        self._owner_pzip = None
        self._owner_pzip4 = None
        self.discriminator = None

        self.owner_ctime = owner_ctime
        self.owner_address = owner_address
        self.owner_address2 = owner_address2
        self.owner_city = owner_city
        self.owner_state = owner_state
        self.owner_zip = owner_zip
        self.owner_zip4 = owner_zip4
        self.owner_ptime = owner_ptime
        self.owner_paddress = owner_paddress
        self.owner_paddress2 = owner_paddress2
        self.owner_pcity = owner_pcity
        self.owner_pstate = owner_pstate
        self.owner_pzip = owner_pzip
        self.owner_pzip4 = owner_pzip4

    @property
    def owner_ctime(self):
        """Gets the owner_ctime of this Owner.  # noqa: E501


        :return: The owner_ctime of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._owner_ctime

    @owner_ctime.setter
    def owner_ctime(self, owner_ctime):
        """Sets the owner_ctime of this Owner.


        :param owner_ctime: The owner_ctime of this Owner.  # noqa: E501
        :type: str
        """
        if owner_ctime is None:
            raise ValueError("Invalid value for `owner_ctime`, must not be `None`")  # noqa: E501

        self._owner_ctime = owner_ctime

    @property
    def owner_address(self):
        """Gets the owner_address of this Owner.  # noqa: E501


        :return: The owner_address of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._owner_address

    @owner_address.setter
    def owner_address(self, owner_address):
        """Sets the owner_address of this Owner.


        :param owner_address: The owner_address of this Owner.  # noqa: E501
        :type: str
        """
        if owner_address is None:
            raise ValueError("Invalid value for `owner_address`, must not be `None`")  # noqa: E501

        self._owner_address = owner_address

    @property
    def owner_address2(self):
        """Gets the owner_address2 of this Owner.  # noqa: E501


        :return: The owner_address2 of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._owner_address2

    @owner_address2.setter
    def owner_address2(self, owner_address2):
        """Sets the owner_address2 of this Owner.


        :param owner_address2: The owner_address2 of this Owner.  # noqa: E501
        :type: str
        """
        if owner_address2 is None:
            raise ValueError("Invalid value for `owner_address2`, must not be `None`")  # noqa: E501

        self._owner_address2 = owner_address2

    @property
    def owner_city(self):
        """Gets the owner_city of this Owner.  # noqa: E501


        :return: The owner_city of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._owner_city

    @owner_city.setter
    def owner_city(self, owner_city):
        """Sets the owner_city of this Owner.


        :param owner_city: The owner_city of this Owner.  # noqa: E501
        :type: str
        """
        if owner_city is None:
            raise ValueError("Invalid value for `owner_city`, must not be `None`")  # noqa: E501

        self._owner_city = owner_city

    @property
    def owner_state(self):
        """Gets the owner_state of this Owner.  # noqa: E501


        :return: The owner_state of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._owner_state

    @owner_state.setter
    def owner_state(self, owner_state):
        """Sets the owner_state of this Owner.


        :param owner_state: The owner_state of this Owner.  # noqa: E501
        :type: str
        """
        if owner_state is None:
            raise ValueError("Invalid value for `owner_state`, must not be `None`")  # noqa: E501

        self._owner_state = owner_state

    @property
    def owner_zip(self):
        """Gets the owner_zip of this Owner.  # noqa: E501


        :return: The owner_zip of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._owner_zip

    @owner_zip.setter
    def owner_zip(self, owner_zip):
        """Sets the owner_zip of this Owner.


        :param owner_zip: The owner_zip of this Owner.  # noqa: E501
        :type: str
        """
        if owner_zip is None:
            raise ValueError("Invalid value for `owner_zip`, must not be `None`")  # noqa: E501

        self._owner_zip = owner_zip

    @property
    def owner_zip4(self):
        """Gets the owner_zip4 of this Owner.  # noqa: E501


        :return: The owner_zip4 of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._owner_zip4

    @owner_zip4.setter
    def owner_zip4(self, owner_zip4):
        """Sets the owner_zip4 of this Owner.


        :param owner_zip4: The owner_zip4 of this Owner.  # noqa: E501
        :type: str
        """
        if owner_zip4 is None:
            raise ValueError("Invalid value for `owner_zip4`, must not be `None`")  # noqa: E501

        self._owner_zip4 = owner_zip4

    @property
    def owner_ptime(self):
        """Gets the owner_ptime of this Owner.  # noqa: E501


        :return: The owner_ptime of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._owner_ptime

    @owner_ptime.setter
    def owner_ptime(self, owner_ptime):
        """Sets the owner_ptime of this Owner.


        :param owner_ptime: The owner_ptime of this Owner.  # noqa: E501
        :type: str
        """
        if owner_ptime is None:
            raise ValueError("Invalid value for `owner_ptime`, must not be `None`")  # noqa: E501

        self._owner_ptime = owner_ptime

    @property
    def owner_paddress(self):
        """Gets the owner_paddress of this Owner.  # noqa: E501


        :return: The owner_paddress of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._owner_paddress

    @owner_paddress.setter
    def owner_paddress(self, owner_paddress):
        """Sets the owner_paddress of this Owner.


        :param owner_paddress: The owner_paddress of this Owner.  # noqa: E501
        :type: str
        """
        if owner_paddress is None:
            raise ValueError("Invalid value for `owner_paddress`, must not be `None`")  # noqa: E501

        self._owner_paddress = owner_paddress

    @property
    def owner_paddress2(self):
        """Gets the owner_paddress2 of this Owner.  # noqa: E501


        :return: The owner_paddress2 of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._owner_paddress2

    @owner_paddress2.setter
    def owner_paddress2(self, owner_paddress2):
        """Sets the owner_paddress2 of this Owner.


        :param owner_paddress2: The owner_paddress2 of this Owner.  # noqa: E501
        :type: str
        """
        if owner_paddress2 is None:
            raise ValueError("Invalid value for `owner_paddress2`, must not be `None`")  # noqa: E501

        self._owner_paddress2 = owner_paddress2

    @property
    def owner_pcity(self):
        """Gets the owner_pcity of this Owner.  # noqa: E501


        :return: The owner_pcity of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._owner_pcity

    @owner_pcity.setter
    def owner_pcity(self, owner_pcity):
        """Sets the owner_pcity of this Owner.


        :param owner_pcity: The owner_pcity of this Owner.  # noqa: E501
        :type: str
        """
        if owner_pcity is None:
            raise ValueError("Invalid value for `owner_pcity`, must not be `None`")  # noqa: E501

        self._owner_pcity = owner_pcity

    @property
    def owner_pstate(self):
        """Gets the owner_pstate of this Owner.  # noqa: E501


        :return: The owner_pstate of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._owner_pstate

    @owner_pstate.setter
    def owner_pstate(self, owner_pstate):
        """Sets the owner_pstate of this Owner.


        :param owner_pstate: The owner_pstate of this Owner.  # noqa: E501
        :type: str
        """
        if owner_pstate is None:
            raise ValueError("Invalid value for `owner_pstate`, must not be `None`")  # noqa: E501

        self._owner_pstate = owner_pstate

    @property
    def owner_pzip(self):
        """Gets the owner_pzip of this Owner.  # noqa: E501


        :return: The owner_pzip of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._owner_pzip

    @owner_pzip.setter
    def owner_pzip(self, owner_pzip):
        """Sets the owner_pzip of this Owner.


        :param owner_pzip: The owner_pzip of this Owner.  # noqa: E501
        :type: str
        """
        if owner_pzip is None:
            raise ValueError("Invalid value for `owner_pzip`, must not be `None`")  # noqa: E501

        self._owner_pzip = owner_pzip

    @property
    def owner_pzip4(self):
        """Gets the owner_pzip4 of this Owner.  # noqa: E501


        :return: The owner_pzip4 of this Owner.  # noqa: E501
        :rtype: str
        """
        return self._owner_pzip4

    @owner_pzip4.setter
    def owner_pzip4(self, owner_pzip4):
        """Sets the owner_pzip4 of this Owner.


        :param owner_pzip4: The owner_pzip4 of this Owner.  # noqa: E501
        :type: str
        """
        if owner_pzip4 is None:
            raise ValueError("Invalid value for `owner_pzip4`, must not be `None`")  # noqa: E501

        self._owner_pzip4 = owner_pzip4

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Owner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
