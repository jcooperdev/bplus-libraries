# coding: utf-8

"""
    Paysafe Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Deposits(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'desposit_type': 'str',
        'country': 'str',
        'account_name': 'str',
        'account_number': 'str',
        'routing_number': 'str',
        'instution_id': 'str'
    }

    attribute_map = {
        'desposit_type': 'desposit_type',
        'country': 'country',
        'account_name': 'account_name',
        'account_number': 'account_number',
        'routing_number': 'routing_number',
        'instution_id': 'instution_id'
    }

    def __init__(self, desposit_type=None, country=None, account_name=None, account_number=None, routing_number=None, instution_id=None):  # noqa: E501
        """Deposits - a model defined in Swagger"""  # noqa: E501

        self._desposit_type = None
        self._country = None
        self._account_name = None
        self._account_number = None
        self._routing_number = None
        self._instution_id = None
        self.discriminator = None

        self.desposit_type = desposit_type
        self.country = country
        self.account_name = account_name
        self.account_number = account_number
        self.routing_number = routing_number
        self.instution_id = instution_id

    @property
    def desposit_type(self):
        """Gets the desposit_type of this Deposits.  # noqa: E501


        :return: The desposit_type of this Deposits.  # noqa: E501
        :rtype: str
        """
        return self._desposit_type

    @desposit_type.setter
    def desposit_type(self, desposit_type):
        """Sets the desposit_type of this Deposits.


        :param desposit_type: The desposit_type of this Deposits.  # noqa: E501
        :type: str
        """
        if desposit_type is None:
            raise ValueError("Invalid value for `desposit_type`, must not be `None`")  # noqa: E501

        self._desposit_type = desposit_type

    @property
    def country(self):
        """Gets the country of this Deposits.  # noqa: E501


        :return: The country of this Deposits.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Deposits.


        :param country: The country of this Deposits.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def account_name(self):
        """Gets the account_name of this Deposits.  # noqa: E501


        :return: The account_name of this Deposits.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this Deposits.


        :param account_name: The account_name of this Deposits.  # noqa: E501
        :type: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")  # noqa: E501

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this Deposits.  # noqa: E501


        :return: The account_number of this Deposits.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Deposits.


        :param account_number: The account_number of this Deposits.  # noqa: E501
        :type: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    @property
    def routing_number(self):
        """Gets the routing_number of this Deposits.  # noqa: E501


        :return: The routing_number of this Deposits.  # noqa: E501
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this Deposits.


        :param routing_number: The routing_number of this Deposits.  # noqa: E501
        :type: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")  # noqa: E501

        self._routing_number = routing_number

    @property
    def instution_id(self):
        """Gets the instution_id of this Deposits.  # noqa: E501


        :return: The instution_id of this Deposits.  # noqa: E501
        :rtype: str
        """
        return self._instution_id

    @instution_id.setter
    def instution_id(self, instution_id):
        """Sets the instution_id of this Deposits.


        :param instution_id: The instution_id of this Deposits.  # noqa: E501
        :type: str
        """
        if instution_id is None:
            raise ValueError("Invalid value for `instution_id`, must not be `None`")  # noqa: E501

        self._instution_id = instution_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Deposits):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
