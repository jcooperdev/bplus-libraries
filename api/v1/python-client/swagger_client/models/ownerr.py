# coding: utf-8

"""
    Paysafe Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Ownerr(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name_first': 'str',
        'name_last': 'str',
        'job_title': 'str',
        'day': 'str',
        'month': 'str',
        'year': 'str',
        'gender': 'str',
        'nationality': 'str',
        'taxid': 'str',
        'percentage': 'str'
    }

    attribute_map = {
        'name_first': 'name_first',
        'name_last': 'name_last',
        'job_title': 'job_title',
        'day': 'day',
        'month': 'month',
        'year': 'year',
        'gender': 'gender',
        'nationality': 'nationality',
        'taxid': 'taxid',
        'percentage': 'percentage'
    }

    def __init__(self, name_first=None, name_last=None, job_title=None, day=None, month=None, year=None, gender=None, nationality=None, taxid=None, percentage=None):  # noqa: E501
        """Ownerr - a model defined in Swagger"""  # noqa: E501

        self._name_first = None
        self._name_last = None
        self._job_title = None
        self._day = None
        self._month = None
        self._year = None
        self._gender = None
        self._nationality = None
        self._taxid = None
        self._percentage = None
        self.discriminator = None

        self.name_first = name_first
        self.name_last = name_last
        self.job_title = job_title
        self.day = day
        self.month = month
        self.year = year
        self.gender = gender
        self.nationality = nationality
        self.taxid = taxid
        self.percentage = percentage

    @property
    def name_first(self):
        """Gets the name_first of this Ownerr.  # noqa: E501


        :return: The name_first of this Ownerr.  # noqa: E501
        :rtype: str
        """
        return self._name_first

    @name_first.setter
    def name_first(self, name_first):
        """Sets the name_first of this Ownerr.


        :param name_first: The name_first of this Ownerr.  # noqa: E501
        :type: str
        """
        if name_first is None:
            raise ValueError("Invalid value for `name_first`, must not be `None`")  # noqa: E501

        self._name_first = name_first

    @property
    def name_last(self):
        """Gets the name_last of this Ownerr.  # noqa: E501


        :return: The name_last of this Ownerr.  # noqa: E501
        :rtype: str
        """
        return self._name_last

    @name_last.setter
    def name_last(self, name_last):
        """Sets the name_last of this Ownerr.


        :param name_last: The name_last of this Ownerr.  # noqa: E501
        :type: str
        """
        if name_last is None:
            raise ValueError("Invalid value for `name_last`, must not be `None`")  # noqa: E501

        self._name_last = name_last

    @property
    def job_title(self):
        """Gets the job_title of this Ownerr.  # noqa: E501


        :return: The job_title of this Ownerr.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this Ownerr.


        :param job_title: The job_title of this Ownerr.  # noqa: E501
        :type: str
        """
        if job_title is None:
            raise ValueError("Invalid value for `job_title`, must not be `None`")  # noqa: E501

        self._job_title = job_title

    @property
    def day(self):
        """Gets the day of this Ownerr.  # noqa: E501


        :return: The day of this Ownerr.  # noqa: E501
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this Ownerr.


        :param day: The day of this Ownerr.  # noqa: E501
        :type: str
        """
        if day is None:
            raise ValueError("Invalid value for `day`, must not be `None`")  # noqa: E501

        self._day = day

    @property
    def month(self):
        """Gets the month of this Ownerr.  # noqa: E501


        :return: The month of this Ownerr.  # noqa: E501
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this Ownerr.


        :param month: The month of this Ownerr.  # noqa: E501
        :type: str
        """
        if month is None:
            raise ValueError("Invalid value for `month`, must not be `None`")  # noqa: E501

        self._month = month

    @property
    def year(self):
        """Gets the year of this Ownerr.  # noqa: E501


        :return: The year of this Ownerr.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Ownerr.


        :param year: The year of this Ownerr.  # noqa: E501
        :type: str
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")  # noqa: E501

        self._year = year

    @property
    def gender(self):
        """Gets the gender of this Ownerr.  # noqa: E501


        :return: The gender of this Ownerr.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Ownerr.


        :param gender: The gender of this Ownerr.  # noqa: E501
        :type: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")  # noqa: E501

        self._gender = gender

    @property
    def nationality(self):
        """Gets the nationality of this Ownerr.  # noqa: E501


        :return: The nationality of this Ownerr.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Ownerr.


        :param nationality: The nationality of this Ownerr.  # noqa: E501
        :type: str
        """
        if nationality is None:
            raise ValueError("Invalid value for `nationality`, must not be `None`")  # noqa: E501

        self._nationality = nationality

    @property
    def taxid(self):
        """Gets the taxid of this Ownerr.  # noqa: E501


        :return: The taxid of this Ownerr.  # noqa: E501
        :rtype: str
        """
        return self._taxid

    @taxid.setter
    def taxid(self, taxid):
        """Sets the taxid of this Ownerr.


        :param taxid: The taxid of this Ownerr.  # noqa: E501
        :type: str
        """
        if taxid is None:
            raise ValueError("Invalid value for `taxid`, must not be `None`")  # noqa: E501

        self._taxid = taxid

    @property
    def percentage(self):
        """Gets the percentage of this Ownerr.  # noqa: E501


        :return: The percentage of this Ownerr.  # noqa: E501
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this Ownerr.


        :param percentage: The percentage of this Ownerr.  # noqa: E501
        :type: str
        """
        if percentage is None:
            raise ValueError("Invalid value for `percentage`, must not be `None`")  # noqa: E501

        self._percentage = percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ownerr):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
