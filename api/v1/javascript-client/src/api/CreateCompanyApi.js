/**
 * Paysafe Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Account', 'model/Aclgroup', 'model/Acluser', 'model/Createcompany', 'model/Creategroup', 'model/Createuser', 'model/Deposits', 'model/Documents', 'model/ErrorResponse', 'model/GeneralResponse', 'model/Merchant', 'model/Owner', 'model/Ownerr', 'model/Reset', 'model/Setting', 'model/Transaction', 'model/Updatecompany', 'model/Updatecontact', 'model/Updateuser'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Account'), require('../model/Aclgroup'), require('../model/Acluser'), require('../model/Createcompany'), require('../model/Creategroup'), require('../model/Createuser'), require('../model/Deposits'), require('../model/Documents'), require('../model/ErrorResponse'), require('../model/GeneralResponse'), require('../model/Merchant'), require('../model/Owner'), require('../model/Ownerr'), require('../model/Reset'), require('../model/Setting'), require('../model/Transaction'), require('../model/Updatecompany'), require('../model/Updatecontact'), require('../model/Updateuser'));
  } else {
    // Browser globals (root is window)
    if (!root.PaysafeApi) {
      root.PaysafeApi = {};
    }
    root.PaysafeApi.CreateCompanyApi = factory(root.PaysafeApi.ApiClient, root.PaysafeApi.Account, root.PaysafeApi.Aclgroup, root.PaysafeApi.Acluser, root.PaysafeApi.Createcompany, root.PaysafeApi.Creategroup, root.PaysafeApi.Createuser, root.PaysafeApi.Deposits, root.PaysafeApi.Documents, root.PaysafeApi.ErrorResponse, root.PaysafeApi.GeneralResponse, root.PaysafeApi.Merchant, root.PaysafeApi.Owner, root.PaysafeApi.Ownerr, root.PaysafeApi.Reset, root.PaysafeApi.Setting, root.PaysafeApi.Transaction, root.PaysafeApi.Updatecompany, root.PaysafeApi.Updatecontact, root.PaysafeApi.Updateuser);
  }
}(this, function(ApiClient, Account, Aclgroup, Acluser, Createcompany, Creategroup, Createuser, Deposits, Documents, ErrorResponse, GeneralResponse, Merchant, Owner, Ownerr, Reset, Setting, Transaction, Updatecompany, Updatecontact, Updateuser) {
  'use strict';

  /**
   * CreateCompany service.
   * @module api/CreateCompanyApi
   * @version 0.0.1
   */

  /**
   * Constructs a new CreateCompanyApi. 
   * @alias module:api/CreateCompanyApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the companiesIdContactGet operation.
     * @callback module:api/CreateCompanyApi~companiesIdContactGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CreateCompanyApi~companiesIdContactGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.companiesIdContactGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesIdContactGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/companies/{id}/contact', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesIdContactPost operation.
     * @callback module:api/CreateCompanyApi~companiesIdContactPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/Updatecontact} opts.body 
     * @param {module:api/CreateCompanyApi~companiesIdContactPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.companiesIdContactPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesIdContactPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/companies/{id}/contact', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesIdDelete operation.
     * @callback module:api/CreateCompanyApi~companiesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CreateCompanyApi~companiesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.companiesIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/companies/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesIdGet operation.
     * @callback module:api/CreateCompanyApi~companiesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CreateCompanyApi~companiesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.companiesIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/companies/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesIdPost operation.
     * @callback module:api/CreateCompanyApi~companiesIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/Updatecompany} opts.body 
     * @param {module:api/CreateCompanyApi~companiesIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.companiesIdPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling companiesIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/companies/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the companiesPost operation.
     * @callback module:api/CreateCompanyApi~companiesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Createcompany} opts.body 
     * @param {module:api/CreateCompanyApi~companiesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.companiesPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/companies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIdDelete operation.
     * @callback module:api/CreateCompanyApi~groupsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CreateCompanyApi~groupsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.groupsIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/groups/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIdGet operation.
     * @callback module:api/CreateCompanyApi~groupsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CreateCompanyApi~groupsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.groupsIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/groups/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIdPost operation.
     * @callback module:api/CreateCompanyApi~groupsIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/Creategroup} opts.body 
     * @param {module:api/CreateCompanyApi~groupsIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.groupsIdPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/groups/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIdTogglePost operation.
     * @callback module:api/CreateCompanyApi~groupsIdTogglePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CreateCompanyApi~groupsIdTogglePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.groupsIdTogglePost = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsIdTogglePost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/groups/{id}/toggle', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsIdUsersPost operation.
     * @callback module:api/CreateCompanyApi~groupsIdUsersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Aclgroup} body 
     * @param {module:api/CreateCompanyApi~groupsIdUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.groupsIdUsersPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling groupsIdUsersPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling groupsIdUsersPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/groups/{id}/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsPost operation.
     * @callback module:api/CreateCompanyApi~groupsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Creategroup} opts.body 
     * @param {module:api/CreateCompanyApi~groupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.groupsPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/groups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsIdAccountPost operation.
     * @callback module:api/CreateCompanyApi~paymentsIdAccountPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Account} body 
     * @param {module:api/CreateCompanyApi~paymentsIdAccountPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.paymentsIdAccountPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentsIdAccountPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentsIdAccountPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/payments/{id}/account', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsIdDepositsBankPost operation.
     * @callback module:api/CreateCompanyApi~paymentsIdDepositsBankPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Deposits} body 
     * @param {module:api/CreateCompanyApi~paymentsIdDepositsBankPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.paymentsIdDepositsBankPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentsIdDepositsBankPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentsIdDepositsBankPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/payments/{id}/deposits/bank', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsIdDocumentsPost operation.
     * @callback module:api/CreateCompanyApi~paymentsIdDocumentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Documents} body 
     * @param {module:api/CreateCompanyApi~paymentsIdDocumentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.paymentsIdDocumentsPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentsIdDocumentsPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentsIdDocumentsPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/payments/{id}/documents', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsIdOwnerAddressPost operation.
     * @callback module:api/CreateCompanyApi~paymentsIdOwnerAddressPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Owner} body 
     * @param {module:api/CreateCompanyApi~paymentsIdOwnerAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.paymentsIdOwnerAddressPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentsIdOwnerAddressPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentsIdOwnerAddressPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/payments/{id}/owner/address', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsIdOwnerPost operation.
     * @callback module:api/CreateCompanyApi~paymentsIdOwnerPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Ownerr} body 
     * @param {module:api/CreateCompanyApi~paymentsIdOwnerPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.paymentsIdOwnerPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentsIdOwnerPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentsIdOwnerPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/payments/{id}/owner', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsIdSettingPost operation.
     * @callback module:api/CreateCompanyApi~paymentsIdSettingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Setting} body 
     * @param {module:api/CreateCompanyApi~paymentsIdSettingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.paymentsIdSettingPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentsIdSettingPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentsIdSettingPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/payments/{id}/setting', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsIdTransactionPost operation.
     * @callback module:api/CreateCompanyApi~paymentsIdTransactionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Transaction} body 
     * @param {module:api/CreateCompanyApi~paymentsIdTransactionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.paymentsIdTransactionPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentsIdTransactionPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentsIdTransactionPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/payments/{id}/transaction', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsPost operation.
     * @callback module:api/CreateCompanyApi~paymentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Merchant} body 
     * @param {module:api/CreateCompanyApi~paymentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.paymentsPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentsPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentsPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/payments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdDelete operation.
     * @callback module:api/CreateCompanyApi~usersIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CreateCompanyApi~usersIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.usersIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdGet operation.
     * @callback module:api/CreateCompanyApi~usersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CreateCompanyApi~usersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.usersIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdGroupsPost operation.
     * @callback module:api/CreateCompanyApi~usersIdGroupsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Acluser} body 
     * @param {module:api/CreateCompanyApi~usersIdGroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.usersIdGroupsPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdGroupsPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersIdGroupsPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/users/{id}/groups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdPost operation.
     * @callback module:api/CreateCompanyApi~usersIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/Updateuser} opts.body 
     * @param {module:api/CreateCompanyApi~usersIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.usersIdPost = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/users/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdResetPost operation.
     * @callback module:api/CreateCompanyApi~usersIdResetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Reset} body 
     * @param {module:api/CreateCompanyApi~usersIdResetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.usersIdResetPost = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdResetPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersIdResetPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/users/{id}/reset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdTogglePost operation.
     * @callback module:api/CreateCompanyApi~usersIdTogglePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CreateCompanyApi~usersIdTogglePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.usersIdTogglePost = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdTogglePost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/users/{id}/toggle', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPost operation.
     * @callback module:api/CreateCompanyApi~usersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneralResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Createuser} opts.body 
     * @param {module:api/CreateCompanyApi~usersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneralResponse}
     */
    this.usersPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeneralResponse;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
